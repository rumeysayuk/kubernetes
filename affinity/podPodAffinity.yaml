apiVersion: v1
kind: Pod
metadata:
  name: frontendpod
  labels:
    app: frontend
    deployment: test
spec:
  containers:
  - name: nginx
    image: nginx:latest
    ports:
    - containerPort: 80
    resources:
      limits:
        cpu: "0.1m"
        memory: "128Mi"
---
apiVersion: v1
kind: Pod
metadata:
  name: cachepod
spec:
  affinity:
    podAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - frontend
        topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 1
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: color
              operator: In
              values:
              - blue
          topologyKey: kubernetes.io/hostname
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: deployment
              operator: In
              values:
              - prod
          topologyKey: topology.kubernetes.io/zone
  containers:
  - name: cachecontainer
    image: redis:6-alpine
    resources:
      limits:
        cpu: "0.1m"
        memory: "128Mi"


# pod affinity, podun hangi node üzerinde oluşturulmaya uygun olduğunu , nodelardaki etiketlere göre değil, halihazırda node'da çalışmakta olan podlardaki etiketlere göre sınırlamaya olanak tanır.
# topologyKey = kubernetes.io/hostname aynı  dersek aynı worker nodeda çalışır
# topologyKey: topology.kubernetes.io/zone dersej aynı worket node üzeirnde çalışmasona gerek yok
# podAntiAffinity bunu uymayan bir yerde çalıştır anlamına geliyor bu da    